// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using HIV_CARE.Repositories.ThienTTT.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace HIV_CARE.Repositories.ThienTTT.DBContext;

public partial class SU25_PRN232_SE1725_G4_HIVcareContext : DbContext
{
    public SU25_PRN232_SE1725_G4_HIVcareContext()
    {
    }

    public SU25_PRN232_SE1725_G4_HIVcareContext(DbContextOptions<SU25_PRN232_SE1725_G4_HIVcareContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AppointmentThienTtt> AppointmentThienTtts { get; set; }

    public virtual DbSet<DoctorPhatNh> DoctorPhatNhs { get; set; }

    public virtual DbSet<SystemUserAccount> SystemUserAccounts { get; set; }

    //    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
    //        => optionsBuilder.UseSqlServer("Data Source=LAPTOP-L7P13R0I\\MSSQLSERVER01;Initial Catalog=SU25_PRN232_SE1725_G4_HIVcare;Persist Security Info=True;User ID=sa;Password=12345");
    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection")).UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AppointmentThienTtt>(entity =>
        {
            entity.HasKey(e => e.AppointmentsThienTttid).HasName("PK_Appointments");

            entity.ToTable("AppointmentThienTTT");

            entity.Property(e => e.AppointmentsThienTttid).HasColumnName("AppointmentsThienTTTID");
            entity.Property(e => e.AppointmentDate).HasColumnType("datetime");
            entity.Property(e => e.ConsultationType)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DoctorsPhatNhid).HasColumnName("DoctorsPhatNHID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Notes).HasMaxLength(500);
            entity.Property(e => e.PatientName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.TotalFee).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.DoctorsPhatNh).WithMany(p => p.AppointmentThienTtts)
                .HasForeignKey(d => d.DoctorsPhatNhid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Appointments_Doctors");
        });

        modelBuilder.Entity<DoctorPhatNh>(entity =>
        {
            entity.HasKey(e => e.DoctorsPhatNhid).HasName("PK_Doctors");

            entity.ToTable("DoctorPhatNH");

            entity.Property(e => e.DoctorsPhatNhid).HasColumnName("DoctorsPhatNHID");
            entity.Property(e => e.AvailableEndDate).HasColumnType("datetime");
            entity.Property(e => e.AvailableStartDate).HasColumnType("datetime");
            entity.Property(e => e.ConsultationFee).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.LicenseNumber)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Specialization)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<SystemUserAccount>(entity =>
        {
            entity.HasKey(e => e.UserAccountId);

            entity.ToTable("System.UserAccount");

            entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");
            entity.Property(e => e.ApplicationCode).HasMaxLength(50);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.EmployeeCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RequestCode).HasMaxLength(50);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}