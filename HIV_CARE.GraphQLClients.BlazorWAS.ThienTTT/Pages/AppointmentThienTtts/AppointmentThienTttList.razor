@page "/AppointmentThienTtts/AppointmentsThienTttList"

@using HIV_CARE.GraphQLClients.BlazorWAS.ThienTTT.Models
@using HIV_CARE.GraphQLClients.BlazorWAS.ThienTTT.GraphQlClients

@inject GraphQLConsumer _graphQLConsumer
@inject IJSRuntime JSRuntime

@if (appointmentThienTtts == null)
{
    <div>Page loading...</div>
}
else
{
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3>📅 Appointments Management</h3>
        <a href="/AppointmentThienTtts/AppointmentThienTttForm" class="btn btn-success">
            <i class="bi bi-plus-circle"></i> Create New Appointment
        </a>
    </div>

    @if (showAlert)
    {
        <div class="alert alert-@alertType alert-dismissible fade show" role="alert">
            @alertMessage
            <button type="button" class="btn-close" @onclick="() => showAlert = false" aria-label="Close"></button>
        </div>
    }

    <table class="table table-striped table-bordered table-hover">
        <thead class="bg-primary text-white">
            <tr>
                <th>Patient Name</th>
                <th>Date</th>
                <th>Time</th>
                <th>Type</th>
                <th>Priority</th>
                <th>Confirmed</th>
                <th>Completed</th>
                <th>Anonymous</th>
                <th>Total Fee</th>
                <th>Status</th>
                <th class="text-center">Actions</th>
            </tr>
        </thead>
        <tbody class="table-light">
            @foreach (var appointment in appointmentThienTtts)
            {
                <tr>
                    <td>@appointment.PatientName</td>
                    <td>@appointment.AppointmentDate.ToString("dd/MM/yyyy")</td>
                    <td>@appointment.AppointmentTime.ToString("hh\\:mm")</td>
                    <td>@appointment.ConsultationType</td>
                    <td class="text-center">@appointment.Priority</td>
                    <td class="text-center">@((appointment.IsConfirmed) ? "Yes" : "No")</td>
                    <td class="text-center">@((appointment.IsCompleted) ? "Yes" : "No")</td>
                    <td class="text-center">@((appointment.IsAnonymous) ? "Yes" : "No")</td>
                    <td class="text-end text-danger">@appointment.TotalFee.ToString("N0")</td>
                    <td>@appointment.Status</td>
                    <td>
                        <div class="btn-group" role="group">
                            <a href="/AppointmentThienTtts/AppointmentThienTttDetail/@appointment.AppointmentsThienTttid"
                               class="btn btn-sm btn-info text-white">
                                <i class="bi bi-eye"></i> View
                            </a>
                            <a href="/AppointmentThienTtts/AppointmentThienTttForm/@appointment.AppointmentsThienTttid"
                               class="btn btn-sm btn-warning">
                                <i class="bi bi-pencil"></i> Edit
                            </a>
                            <button type="button"
                                    class="btn btn-sm btn-danger"
                                    @onclick="() => ConfirmDelete(appointment.AppointmentsThienTttid, appointment.PatientName)">
                                <i class="bi bi-trash"></i> Delete
                            </button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (!appointmentThienTtts.Any())
    {
        <div class="text-center py-4">
            <h5 class="text-muted">No appointments found</h5>
            <p class="text-muted">Click "Create New Appointment" to add your first appointment.</p>
        </div>
    }
}

@code {
    private List<AppointmentThienTtt> appointmentThienTtts;
    private bool showAlert = false;
    private string alertMessage = "";
    private string alertType = "success";

    protected override async Task OnInitializedAsync()
    {
        await LoadAppointments();
    }

    private async Task LoadAppointments()
    {
        try
        {
            appointmentThienTtts = await _graphQLConsumer.GetAppointmentTtts();

            // Add debugging
            Console.WriteLine($"Retrieved {appointmentThienTtts?.Count ?? 0} appointments");
            if (appointmentThienTtts?.Any() == true)
            {
                Console.WriteLine($"First appointment: {appointmentThienTtts.First().PatientName}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
            appointmentThienTtts = new List<AppointmentThienTtt>();
            ShowAlert("Error loading appointments: " + ex.Message, "danger");
        }
    }

    private async Task ConfirmDelete(int appointmentId, string patientName)
    {
        try
        {
            var result = await _graphQLConsumer.DeleteAppointmentThienTtt(appointmentId);

            if (result)
            {
                ShowAlert($"Appointment for {patientName} has been successfully deleted.", "success");
                await LoadAppointments(); // Refresh the list
            }
            else
            {
                ShowAlert($"Failed to delete appointment for {patientName}. Please try again.", "danger");
            }
        }
        catch (Exception ex)
        {
            ShowAlert($"Error deleting appointment: {ex.Message}", "danger");
            Console.WriteLine($"Delete error: {ex.Message}");
        }
    }

    private void ShowAlert(string message, string type)
    {
        alertMessage = message;
        alertType = type;
        showAlert = true;
        StateHasChanged();

        // Auto-hide alert after 5 seconds
        Task.Delay(5000).ContinueWith(_ =>
        {
            InvokeAsync(() =>
            {
                showAlert = false;
                StateHasChanged();
            });
        });
    }
}